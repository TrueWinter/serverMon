<!DOCTYPE html>
<html>
	<head>
		<title>Ping</title>
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.css" />
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<style>
			@media only screen and (min-width: 576px) {
				.main-content {
					width:520px;
					margin:auto;
				}
			}
			@media only screen and (min-width: 768px) {
				.main-content {
					width: 700px;
					margin:auto;
				}
			}
			@media only screen and (min-width: 992px) {
				.main-content {
					width: 920px;
					margin:auto;
				}
			}
			@media only screen and (min-width: 1200px) {
				.main-content {
					width: 1100px;
					margin:auto;
				}
			}
			h1, #back {
				text-align: center;
				display: block;
			}
		</style>
	</head>
	<body>
		<div class="main-content">
			<h1>Ping Data for <b><%= name %></b></h1>
			<a id="back" href="/monitors">Monitors</a>
			<hr />
			Change graph time period:
			<input type="text" id="timeValue" onkeydown="if (event.keyCode==13){formSubmitted()}" pattern="[0-9]{1,2}" maxlength="2" size="2" autocomplete="off" />
			<select id="timeUnit" onkeydown="if (event.keyCode==13){formSubmitted()}" autocomplete="off">
				<option value="hours">hours</option>
				<option value="days">days</option>
			</select>
			<button type="button" id="loadBtn">Load</button>
			<hr />
			<div id="chartArea">
				<canvas id="Chart1" style="max-height: 550px; display: block; width: 1100px; height: 550px;"></canvas>
			</div>
		</div>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.27.0/moment.min.js"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"></script>
		<script>
			function formSubmitted() {
				var value = document.getElementById('timeValue').value;
				var unit = document.getElementById('timeUnit').value;

				if (!(value && unit)) {
					return;
				}

				if (!value.match(/^[0-9]{1,2}$/)) {
					return alert('Invalid value');
				}

				var units = ['hours', 'days'];

				if (!units.includes(unit)) {
					return alert('Invalid unit of time');
				}

				switch(unit) {
					case 'hours':
						if (value > 24 || value <= 0) {
							return alert('Hour value must be more than 0 and less than 25');
						}
						break;
					case 'days':
						if (value > 30 || value <= 0) {
							return alert('Day value must be more than 0 and less than 31');
						}
						break;
				}

				loadChart(parseInt(value), unit);
			}

			document.getElementById('loadBtn').addEventListener('click', function() {
				formSubmitted();
			});

			function loadChart(value, unit) {
				document.getElementById('chartArea').style.filter = 'blur(5px)';
				document.getElementById('chartArea').style.pointerEvents = 'none';

				function generateAPIURL(value, unit) {
					var base = '/api/ping/<%= id %>';

					if (!(value && unit)) {
						return base;
					}

					switch(unit) {
						case 'hours':
							if (value < 24 && value > 0) {
								return `${base}?h=${value}`;
							} else {
								return base;
							}
							break;
						case 'days':
							if (value < 31 && value > 1) {
								return `${base}?d=${value}`;
							} else {
								return base;
							}
							break;
						default:
							return base;
					}
				}

				var xhr = new XMLHttpRequest();
				xhr.open('GET', generateAPIURL(value, unit));
				xhr.onload = function() {
					var data = JSON.parse(this.responseText).data;

					document.getElementById('chartArea').style.filter = '';
					document.getElementById('chartArea').style.pointerEvents = '';

					if (window.lc) {
						lc.destroy();
					}
			
					var lineChartData = {
						labels: [],
						datasets: [
							{
								label: 'Time Period Average',
								borderColor: 'pink',
								backgroundColor: 'transparent',
								spanGaps: false,
								borderWidth: 1,
								data: []
							},
							{
								label: 'Average',
								borderColor: 'cyan',
								backgroundColor: 'transparent',
								spanGaps: false,
								data: []
							},
							{
								label: 'Max',
								borderColor: 'purple',
								backgroundColor: 'transparent',
								spanGaps: false,
								data: []
							},
							{
								label: 'Min',
								borderColor: 'green',
								backgroundColor: 'transparent',
								spanGaps: false,
								data: []
							}
						]
					};

					if (value > 2 && unit === 'days') {
						for (var i = 0; i < lineChartData.datasets.length; i++) {
							lineChartData.datasets[i].pointRadius = 0;
							lineChartData.datasets[i].pointHitRadius = 0;
						}
					}

					function round(int) {
						return Math.round(int * 1000) / 1000;
					}

					//console.log(`DATA: ${data.length}`);

					var total = 0;
					var dataPoints = 0;
					var startTimestamp = 0;
					var endTimestamp = 0;

					for (var i = 0; i < data.length; i++) {
						var timestamp = data[i].timestamp * 1000;
						lineChartData.labels.push(timestamp);
						lineChartData.datasets[1].data.push({ x: timestamp, y: data[i].average });
						lineChartData.datasets[2].data.push({ x: timestamp, y: data[i].max });
						lineChartData.datasets[3].data.push({ x: timestamp, y: data[i].min });
						
						if (data[i].average) {
							total += data[i].average;
							dataPoints++;
						}

						if (i === 0) {
							startTimestamp = timestamp;
						}

						if (i === data.length - 1) {
							endTimestamp = timestamp;
						}
					}

					//console.log(total);
					//console.log(dataPoints);

					lineChartData.datasets[0].data.push({ x: startTimestamp, y: round(total/dataPoints) });
					lineChartData.datasets[0].data.push({ x: endTimestamp, y: round(total/dataPoints) });

					var alertAbovePercent = <%= alertAbovePercent || false %>;

					//console.log(alertAbovePercent);
					//console.log(1 + (alertAbovePercent / 100));

					var maxShown = true;
					var averageShown = true;
					var minShown = true;

					function getMaxTicks() {
						var dataset;

						/*console.log(`MAX: ${maxShown}`);
						console.log(`AVERAGE: ${averageShown}`);
						console.log(`MIN: ${minShown}`);*/

						if (maxShown) {
							dataset = 'max';
						} else if (averageShown) {
							dataset = 'average';
						} else if (minShown) {
							dataset = 'min';
						} else {
							return;
						}

						//console.log(dataset);

						var currentMax = 0;
						var paddingToAdd = 1.15; // 15%
						var roundToNearest = 5;

						window.data = data;

						for (var i = 0; i < data.length; i++) {
							console.log(data[i]);
							if (data[i][dataset] !== null && (i === 0 || data[i][dataset] > currentMax)) {
								currentMax = data[i][dataset];
								//console.log(currentMax);
							}
						}
						
						var tempMaxValue = Math.round(currentMax * paddingToAdd);
						var returnedMaxValue = tempMaxValue;

						if (tempMaxValue % roundToNearest !== 0) {
							returnedMaxValue = Math.ceil(tempMaxValue / roundToNearest) * roundToNearest;
						}

						if (currentMax === 0) {
							returnedMaxValue = roundToNearest;
						}

						//console.log(returnedMaxValue);
						//return tempMaxValue;

						return returnedMaxValue;
					}

					window.getMaxTicks = getMaxTicks;

					var plugin = {
						id: 'recalculateMaxTicks',
						afterRender: function(chart, options) {
							recalculateMaxTicks();
						},
						afterUpdate: function(chart, options) {
							recalculateMaxTicks();
						}
					};

					//Chart.plugins.register(plugin);

					ctx = document.getElementById("Chart1").getContext("2d");
					var pingLineChart = new Chart(ctx, {
						type: 'line',
						data: lineChartData,
						options: {
							animation: false,
							maintainAspectRatio: false,
							hover: {
								mode: 'point'
							},
							tooltips: {
								mode: 'index',
								axis: 'y',
								// https://stackoverflow.com/a/48151428
								filter: function (tooltipItem, data) {
									var label = data.datasets[tooltipItem.datasetIndex].label;
									//console.log(tooltipItem);
									//console.log(data);
									if (label === `${alertAbovePercent}% above average`) {
										return false;
									} else {
										return true;
									}
								}
							},
							legend: {
								onClick: function(e, legendItem) {
									var index = legendItem.datasetIndex;
									var ci = this.chart;
									var meta = ci.getDatasetMeta(index);

									// See controller.isDatasetVisible comment
									meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;

									var isHidden = meta.hidden;
									var legendItemName = legendItem.text;

									switch(legendItemName) {
										case 'Max':
											maxShown = !isHidden;
											break;
										case 'Min':
											minShown = !isHidden;
											break;
										case 'Average':
											averageShown = !isHidden;
											break;
									}

									ci.options.scales.yAxes[0].ticks.max = getMaxTicks();
									//ci.update();

									if (['Max', 'Min', 'Average'].includes(legendItemName)) {
										ci.data.datasets.pop();
										ci.update();
										showAlert();
									} else {
										ci.update();
									}
								}
							},
							scales: {
								xAxes: [{
									type: 'time',
									time: {
										tooltipFormat: 'll HH:mm'
									},
									scaleLabel: {
										display: true,
										labelString: 'Time'
									}
								}],
								yAxes: [{
									scaleLabel: {
										display: true,
										labelString: 'Response Time'
									},
									ticks: {
										max: getMaxTicks()
									}
								}]
							}
						}
					});

					window.lc = pingLineChart;

					function showAlert() {
						if (alertAbovePercent) {
							var times = lineChartData.datasets[1].data;

							var alertTimes = [];
							var alertDataset = [];
							var alertAbove = round(total/dataPoints) * (1 + (alertAbovePercent / 100));

							//console.log(alertAbove);
							//console.log(`T: ${times.length}`);

							for (var i = 0; i < times.length; i++) {
								//console.log(avg*alertPercentage);
								//console.log(times[i].y);
								if (times[i].y > alertAbove) {
									if (i > 0) {
										alertTimes.push(times[i - 1]);
									}
									alertTimes.push(times[i]);
								}
							}

							//console.log(alertTimes);

							for (var i = 0; i < times.length; i++) {
								if (!alertTimes.includes(times[i])) {
									var tmpData = Object.assign({}, times[i]);
									tmpData.y = pingLineChart.scales['y-axis-0']._startValue;
									alertDataset.push(tmpData);
								} else {
									var tmpData = Object.assign({}, times[i]);
									tmpData.y = pingLineChart.scales['y-axis-0']._endValue;
									alertDataset.push(tmpData);
								}
							}

							//console.log(alertDataset);

							var alertDatasetConfig = {
								label: `${alertAbovePercent}% above average`,
								borderColor: 'transparent',
								backgroundColor: 'rgba(244, 32, 114, 0.15)',
								pointRadius: 0,
								pointHitRadius: 0,
								pointBorderWidth: 0,
								steppedLine: true,
								data: alertDataset
							};
								
							pingLineChart.data.datasets.push(alertDatasetConfig);
							pingLineChart.update();
						}
					}

					showAlert();

					function recalculateMaxTicks() {
						if (!pingLineChart) {
							setTimeout(function() {
								recalculateMaxTicks();
							}, 50);
							return;
						}

						if (pingLineChart.scales['y-axis-0']._ticks.length >= 3 && (pingLineChart.scales['y-axis-0']._ticks[0].value - pingLineChart.scales['y-axis-0']._ticks[1].value) === (pingLineChart.scales['y-axis-0']._ticks[1].value - pingLineChart.scales['y-axis-0']._ticks[2].value)) {
							return;
						}

						var dataset;

						if (maxShown) {
							dataset = 'max';
						} else if (averageShown) {
							dataset = 'average';
						} else if (minShown) {
							dataset = 'min';
						} else {
							return;
						}

						var currentMax;
						var paddingToAdd = 1.10; // 15%
						var roundToNearest = 5;

						for (var i = 0; i < data.length; i++) {
							//console.log(data[i]);
							if (data[i][dataset] !== null && (i === 0 || data[i][dataset] > currentMax)) {
								currentMax = data[i][dataset];
								//console.log(currentMax);
							}
						}

						//console.log(currentMax);

						if (pingLineChart.scales['y-axis-0']._ticks[1].value >= (currentMax + Math.round(currentMax*0.05))) {
							pingLineChart.options.scales.yAxes[0].ticks.max = pingLineChart.scales['y-axis-0']._ticks[1].value;
							pingLineChart.update();
						}
					}

					window.recalc = recalculateMaxTicks;
				};
				xhr.onerror = function() {
					alert('An error occurred while loading ping data');
				};
				xhr.send();
			}

			window.addEventListener('load', function() {
				loadChart();
			});
		</script>
	</body>
</html>