<!DOCTYPE html>
<html>
	<head>
		<title>Ping</title>
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.css" />
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<style>
			@media only screen and (min-width: 576px) {
				.main-content {
					width:520px;
					margin:auto;
				}
			}
			@media only screen and (min-width: 768px) {
				.main-content {
					width: 700px;
					margin:auto;
				}
			}
			@media only screen and (min-width: 992px) {
				.main-content {
					width: 920px;
					margin:auto;
				}
			}
			@media only screen and (min-width: 1200px) {
				.main-content {
					width: 1100px;
					margin:auto;
				}
			}
			h1, #back {
				text-align: center;
				display: block;
			}
			body {
				background-color: #222;
				color: white;
			}
			a {
				color: lime;
			}
			a:hover, a:focus {
				color:rgb(0, 255, 106);
			}
			.chart-options {
				display: flex;
				justify-content: space-around;
			}
		</style>
	</head>
	<body>
		<div class="main-content">
			<h1>Ping Data for <b><%= name %></b></h1>
			<a id="back" href="/monitors">Monitors</a>
			<hr />
			<div id="main-content-chart">
				<div class="chart-options">
					<div class="chart-option">
						Change graph time period:
						<input type="text" id="timeValue" onkeydown="if (event.keyCode==13){formSubmitted()}" pattern="[0-9]{1,2}" maxlength="2" size="2" autocomplete="off" />
						<select id="timeUnit" onkeydown="if (event.keyCode==13){formSubmitted()}" autocomplete="off">
							<option value="hours">hours</option>
							<option value="days">days</option>
						</select>
						<button type="button" id="loadBtn">Load</button>
					</div>
					<div class="chart-option">
						Above average data:
						<select id="alertDataOption" onkeydown="if (event.keyCode==13){this.nextElementSibling.click()}" autocomplete="off">
							<option value="average" selected>Average</option>
							<option value="min">Min</option>
							<option value="max">Max</option>
						</select>
						<button type="button" id="loadBtnAlertData">Load</button>
					</div>
				</div>
				<hr />
				<div id="chartArea">
					<canvas id="Chart1" style="max-height: 550px; display: block; width: 1100px; height: 550px;"></canvas>
				</div>
			</div>
		</div>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.27.0/moment.min.js"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"></script>
		<script>
			function formSubmitted() {
				var value = document.getElementById('timeValue').value;
				var unit = document.getElementById('timeUnit').value;

				if (!(value && unit)) {
					return;
				}

				if (!value.match(/^[0-9]{1,2}$/)) {
					return alert('Invalid value');
				}

				var units = ['hours', 'days'];

				if (!units.includes(unit)) {
					return alert('Invalid unit of time');
				}

				switch(unit) {
					case 'hours':
						if (value > 24 || value <= 0) {
							return alert('Hour value must be more than 0 and less than 25');
						}
						break;
					case 'days':
						if (value > 30 || value <= 0) {
							return alert('Day value must be more than 0 and less than 31');
						}
						break;
				}

				loadChart(parseInt(value), unit);
			}

			document.getElementById('loadBtn').addEventListener('click', function() {
				formSubmitted();
			});

			var alertOnData = 'average';

			function loadChart(value, unit) {
				document.getElementById('main-content-chart').style.filter = 'blur(5px)';
				document.getElementById('main-content-chart').style.pointerEvents = 'none';

				function generateAPIURL(value, unit) {
					var base = '/api/ping/<%= id %>';

					if (!(value && unit)) {
						return base;
					}

					switch(unit) {
						case 'hours':
							if (value < 24 && value > 0) {
								return `${base}?h=${value}`;
							} else {
								return base;
							}
							break;
						case 'days':
							if (value < 31 && value > 1) {
								return `${base}?d=${value}`;
							} else {
								return base;
							}
							break;
						default:
							return base;
					}
				}

				var xhr = new XMLHttpRequest();
				xhr.open('GET', generateAPIURL(value, unit));
				xhr.onload = function() {
					var data = JSON.parse(this.responseText).data;

					window.data = data;

					document.getElementById('main-content-chart').style.filter = '';
					document.getElementById('main-content-chart').style.pointerEvents = '';

					if (window.lc) {
						lc.destroy();
					}
			
					var lineChartData = {
						labels: [],
						datasets: [
							{
								label: 'Time Period Average',
								borderColor: 'pink',
								backgroundColor: 'transparent',
								spanGaps: false,
								borderWidth: 1,
								data: []
							},
							{
								label: 'Average',
								borderColor: 'cyan',
								backgroundColor: 'transparent',
								spanGaps: false,
								data: []
							},
							{
								label: 'Max',
								borderColor: 'purple',
								backgroundColor: 'transparent',
								spanGaps: false,
								data: []
							},
							{
								label: 'Min',
								borderColor: 'green',
								backgroundColor: 'transparent',
								spanGaps: false,
								data: []
							}
						]
					};

					if (value > 2 && unit === 'days') {
						for (var i = 0; i < lineChartData.datasets.length; i++) {
							lineChartData.datasets[i].pointRadius = 0;
							lineChartData.datasets[i].pointHitRadius = 0;
						}
					}

					function round(int) {
						return Math.round(int * 1000) / 1000;
					}

					var total = 0;
					var dataPoints = 0;
					var startTimestamp = 0;
					var endTimestamp = 0;

					for (var i = 0; i < data.length; i++) {
						var timestamp = data[i].timestamp * 1000;
						lineChartData.labels.push(timestamp);
						lineChartData.datasets[1].data.push({ x: timestamp, y: data[i].average });
						lineChartData.datasets[2].data.push({ x: timestamp, y: data[i].max });
						lineChartData.datasets[3].data.push({ x: timestamp, y: data[i].min });
						
						if (data[i].average) {
							total += data[i].average;
							dataPoints++;
						}

						if (i === 0) {
							startTimestamp = timestamp;
						}

						if (i === data.length - 1) {
							endTimestamp = timestamp;
						}
					}

					lineChartData.datasets[0].data.push({ x: startTimestamp, y: round(total/dataPoints) });
					lineChartData.datasets[0].data.push({ x: endTimestamp, y: round(total/dataPoints) });

					function calculateAverageForDataset(dataset) {
						var datasetData = lineChartData.datasets[dataset].data;

						var tmpTotal = 0;
						var tmpDataPoints = 0;

						for (var i = 0; i < datasetData.length; i++) {
							if (datasetData[i].y) {
								tmpTotal += datasetData[i].y;
								tmpDataPoints++;
							}
						}

						return round(tmpTotal / tmpDataPoints);
					}

					var alertAbovePercent = <%= alertAbovePercent || false %>;

					var maxShown = true;
					var averageShown = true;
					var minShown = true;

					var disableRedoAlertRender = false;

					var step = 0;

					function doAddTick(ticks) {
						if (ticks.length < 3) {
							return false;
						}

						step = ticks[1] - ticks[2];

						var dataset;

						if (maxShown) {
							dataset = 'max';
						} else if (averageShown) {
							dataset = 'average';
						} else if (minShown) {
							dataset = 'min';
						} else {
							return;
						}

						var currentMax = 0;
						var minPadding = 0.7;
						var roundToNearest = 5;

						for (var i = 0; i < data.length; i++) {
							if (data[i][dataset] !== null && (i === 0 || data[i][dataset] > currentMax)) {
								currentMax = data[i][dataset];
							}
						}
					
						if (ticks[1] + (step * minPadding) < currentMax) {
							console.log(`Adding ${step} to ticks`);
							return true;
						} else {
							return false;
						}
					}

					ctx = document.getElementById('Chart1').getContext('2d');
					var pingLineChart = new Chart(ctx, {
						type: 'line',
						data: lineChartData,
						options: {
							animation: false,
							maintainAspectRatio: false,
							hover: {
								mode: 'point'
							},
							tooltips: {
								mode: 'index',
								axis: 'y',
								// https://stackoverflow.com/a/48151428
								filter: function (tooltipItem, data) {
									var label = data.datasets[tooltipItem.datasetIndex].label;
									if (label === `${alertAbovePercent}% above average (${alertOnData})`) {
										return false;
									} else {
										return true;
									}
								}
							},
							legend: {
								labels: {
									fontColor: 'white'
								},
								onClick: function(e, legendItem) {
									var index = legendItem.datasetIndex;
									var ci = this.chart;
									var meta = ci.getDatasetMeta(index);

									// See controller.isDatasetVisible comment
									meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;
									ci.data.datasets[index].hidden = meta.hidden;

									var isHidden = meta.hidden;
									var legendItemName = legendItem.text;

									switch(legendItemName) {
										case 'Max':
											maxShown = !isHidden;
											break;
										case 'Min':
											minShown = !isHidden;
											break;
										case 'Average':
											averageShown = !isHidden;
											break;
									}

									var hiddenAlert = ci.getDatasetMeta(4).hidden;

									if (['Max', 'Min', 'Average'].includes(legendItemName)) {
										disableRedoAlertRender = false;
										ci.data.datasets.pop();
										ci.update();
										showAlert(hiddenAlert, alertOnData);
										//changeAlertData();
									} else {
										if (legendItemName === `${alertAbovePercent}% above average (${alertOnData})`) {
											disableRedoAlertRender = true;
										}
										
										ci.update();
									}
								}
							},
							scales: {
								xAxes: [{
									type: 'time',
									time: {
										tooltipFormat: 'll HH:mm'
									},
									scaleLabel: {
										display: true,
										labelString: 'Time',
										fontColor: 'white'
									},
									ticks: {
										fontColor: 'white'
									}
								}],
								yAxes: [{
									scaleLabel: {
										display: true,
										labelString: 'Response Time',
										fontColor: 'white'
									},
									afterBuildTicks: function(axis, ticks) {
										var addTick = doAddTick(ticks);

										if (addTick) {
											var newTick = ticks[0] + step;
											var newTickArray = [newTick].concat(ticks);
											axis.max = newTick;
											axis.options.ticks.maxTicksLimit = 12;
											return newTickArray;
										} else {
											return ticks;
										}
									},
									ticks: {
										fontColor: 'white'
									}
								}]
							}
						}
					});

					window.lc = pingLineChart;
					window.ctx = ctx;
					window.lineChartData = lineChartData;
					
					function changeAlertData() {
						var allowedAlertDataOptions = ['average', 'min', 'max'];

						var selectedAlertDataOption = document.getElementById('alertDataOption').value;

						if (!allowedAlertDataOptions.includes(selectedAlertDataOption)) {
							return;
						}

						document.getElementById('main-content-chart').style.filter = 'blur(5px)';
						document.getElementById('main-content-chart').style.pointerEvents = 'none';

						alertOnData = selectedAlertDataOption;

						var hiddenAlert = pingLineChart.getDatasetMeta(4).hidden;

						pingLineChart.data.datasets.pop();
						pingLineChart.update();
						showAlert(hiddenAlert, alertOnData);
					}

					window.changeAlertData = changeAlertData;

					document.getElementById('loadBtnAlertData').onclick = function() {
						changeAlertData();
					};

					function showAlert(hideAlerts, datasetName) {
						if (alertAbovePercent) {

							var dataset;

							switch (datasetName) {
								case 'average':
									dataset =  1;
									break;
								case 'min':
									dataset = 3;
									break;
								case 'max':
									dataset = 2;
									break;
								default:
									dataset = 1;
							}

							var times = lineChartData.datasets[dataset].data;

							var alertTimes = [];
							var alertDataset = [];
							//var alertAbove = round(total/dataPoints) * (1 + (alertAbovePercent / 100));
							var alertAbove = round(calculateAverageForDataset(dataset) * (1 + (alertAbovePercent / 100)));

							for (var i = 0; i < times.length; i++) {
								if (times[i].y > alertAbove) {
									if (i > 0) {
										alertTimes.push(times[i - 1]);
									}
									alertTimes.push(times[i]);
								}
							}

							for (var i = 0; i < times.length; i++) {
								if (!alertTimes.includes(times[i])) {
									var tmpData = Object.assign({}, times[i]);
									tmpData.y = pingLineChart.scales['y-axis-0'].min;
									alertDataset.push(tmpData);
								} else {
									var tmpData = Object.assign({}, times[i]);
									tmpData.y = pingLineChart.scales['y-axis-0'].max;
									alertDataset.push(tmpData);
								}
							}

							var alertDatasetConfig = {
								label: `${alertAbovePercent}% above average (${alertOnData})`,
								borderColor: 'transparent',
								backgroundColor: 'rgba(244, 32, 114, 0.15)',
								pointRadius: 0,
								pointHitRadius: 0,
								pointBorderWidth: 0,
								steppedLine: true,
								data: alertDataset,
								hidden: hideAlerts
							};

							pingLineChart.data.datasets.push(alertDatasetConfig);
							pingLineChart.update();

							pingLineChart.getDatasetMeta(4).hidden = hideAlerts;

							document.getElementById('main-content-chart').style.filter = '';
							document.getElementById('main-content-chart').style.pointerEvents = '';
						}
					}

					showAlert(null, alertOnData);

					window.sa = showAlert;
				};
				xhr.onerror = function() {
					alert('An error occurred while loading ping data');
				};
				xhr.send();
			}

			window.addEventListener('load', function() {
				loadChart();
			});
		</script>
	</body>
</html>