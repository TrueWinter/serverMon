<!DOCTYPE html>
<html>
	<head>
		<title>Ping</title>
		<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.css" />
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<style>
			@media only screen and (min-width: 576px) {
				.main-content {
					width:520px;
					margin:auto;
				}
			}
			@media only screen and (min-width: 768px) {
				.main-content {
					width: 700px;
					margin:auto;
				}
			}
			@media only screen and (min-width: 992px) {
				.main-content {
					width: 920px;
					margin:auto;
				}
			}
			@media only screen and (min-width: 1200px) {
				.main-content {
					width: 1100px;
					margin:auto;
				}
			}
			h1, #back {
				text-align: center;
				display: block;
			}
		</style>
	</head>
	<body>
		<div class="main-content">
			<h1>Ping Data for <b><%= name %></b></h1>
			<a id="back" href="/monitors">Monitors</a>
			<hr />
			Change graph time period:
			<input type="text" id="timeValue" onkeydown="if (event.keyCode==13){formSubmitted()}" pattern="[0-9]{1,2}" maxlength="2" size="2" autocomplete="off" />
			<select id="timeUnit" onkeydown="if (event.keyCode==13){formSubmitted()}" autocomplete="off">
				<option value="hours">hours</option>
				<option value="days">days</option>
			</select>
			<button type="button" id="loadBtn">Load</button>
			<hr />
			<div id="chartArea">
				<canvas id="Chart1" style="max-height: 550px; display: block; width: 1100px; height: 550px;"></canvas>
			</div>
		</div>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.27.0/moment.min.js"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js"></script>
		<script>
			function formSubmitted() {
				var value = document.getElementById('timeValue').value;
				var unit = document.getElementById('timeUnit').value;

				if (!(value && unit)) {
					return;
				}

				if (!value.match(/^[0-9]{1,2}$/)) {
					return alert('Invalid value');
				}

				var units = ['hours', 'days'];

				if (!units.includes(unit)) {
					return alert('Invalid unit of time');
				}

				switch(unit) {
					case 'hours':
						if (value > 24 || value <= 0) {
							return alert('Hour value must be more than 0 and less than 25');
						}
						break;
					case 'days':
						if (value > 30 || value <= 0) {
							return alert('Day value must be more than 0 and less than 31');
						}
						break;
				}

				loadChart(parseInt(value), unit);
			}

			document.getElementById('loadBtn').addEventListener('click', function() {
				formSubmitted();
			});

			function loadChart(value, unit) {
				document.getElementById('chartArea').style.filter = 'blur(5px)';
				document.getElementById('chartArea').style.pointerEvents = 'none';

				function generateAPIURL(value, unit) {
					var base = '/api/ping/<%= id %>';

					if (!(value && unit)) {
						return base;
					}

					switch(unit) {
						case 'hours':
							if (value < 24 && value > 0) {
								return `${base}?h=${value}`;
							} else {
								return base;
							}
							break;
						case 'days':
							if (value < 31 && value > 1) {
								return `${base}?d=${value}`;
							} else {
								return base;
							}
							break;
						default:
							return base;
					}
				}

				var xhr = new XMLHttpRequest();
				xhr.open('GET', generateAPIURL(value, unit));
				xhr.onload = function() {
					var data = JSON.parse(this.responseText).data;

					document.getElementById('chartArea').style.filter = '';
					document.getElementById('chartArea').style.pointerEvents = '';

					if (window.lc) {
						lc.destroy();
					}
			
					var lineChartData = {
						labels: [],
						datasets: [
							{
								label: 'Average',
								borderColor: 'cyan',
								backgroundColor: 'transparent',
								spanGaps: false,
								data: []
							},
							{
								label: 'Max',
								borderColor: 'purple',
								backgroundColor: 'transparent',
								spanGaps: false,
								data: []
							},
							{
								label: 'Min',
								borderColor: 'green',
								backgroundColor: 'transparent',
								spanGaps: false,
								data: []
							},
							{
								label: 'Time Period Average',
								borderColor: 'pink',
								backgroundColor: 'transparent',
								spanGaps: false,
								data: []
							},
						]
					};

					if (value > 2 && unit === 'days') {
						for (var i = 0; i < lineChartData.datasets.length; i++) {
							lineChartData.datasets[i].pointRadius = 0;
							lineChartData.datasets[i].pointHitRadius = 0;
						}
					}

					function round(int) {
						return Math.round(int * 1000) / 1000;
					}

					console.log(`DATA: ${data.length}`);

					var total = 0;
					var dataPoints = data.length;
					var startTimestamp = 0;
					var endTimestamp = 0;

					for (var i = 0; i < data.length; i++) {
						var timestamp = data[i].timestamp * 1000;
						lineChartData.labels.push(timestamp);
						lineChartData.datasets[0].data.push({ x: timestamp, y: data[i].average });
						lineChartData.datasets[1].data.push({ x: timestamp, y: data[i].max });
						lineChartData.datasets[2].data.push({ x: timestamp, y: data[i].min });
						
						if (data[i].average) {
							total += data[i].average;
						}

						if (i === 0) {
							startTimestamp = timestamp;
						}

						if (i === data.length - 1) {
							endTimestamp = timestamp;
						}
					}

					console.log(total);
					console.log(dataPoints);

					lineChartData.datasets[3].data.push({ x: startTimestamp, y: round(total/dataPoints) });
					lineChartData.datasets[3].data.push({ x: endTimestamp, y: round(total/dataPoints) });

					ctx = document.getElementById("Chart1").getContext("2d");
					var pingLineChart = new Chart(ctx, {
						type: 'line',
						data: lineChartData,
						options: {
							animation: false,
							maintainAspectRatio: false,
							tooltips: {
								mode: 'index',
								axis: 'y'
							},
							scales: {
								xAxes: [{
									type: 'time',
									time: {
										tooltipFormat: 'll HH:mm'
									},
									scaleLabel: {
										display: true,
										labelString: 'Time'
									}
								}],
								yAxes: [{
									scaleLabel: {
										display: true,
										labelString: 'Response Time'
									}
								}]
							}
						}
					});

					window.lc = pingLineChart;
				};
				xhr.onerror = function() {
					alert('An error occurred while loading ping data');
				};
				xhr.send();
			}

			window.addEventListener('load', function() {
				loadChart();
			});
		</script>
	</body>
</html>